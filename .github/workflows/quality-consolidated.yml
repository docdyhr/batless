name: Code Quality & Security

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]
  schedule:
    # Run security checks weekly
    - cron: "0 2 * * 1"
  workflow_dispatch:

permissions:
  contents: read
  checks: write
  pull-requests: write
  security-events: write

jobs:
  # Markdown linting
  markdown-lint:
    name: Markdown Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '20'

      - name: Install markdownlint-cli2
        run: npm install -g markdownlint-cli2@0.14.0

      - name: Prepare markdownlint config
        run: |
          if [ ! -f ".markdownlint.jsonc" ]; then
            cat > .markdownlint.jsonc <<'JSON'
          {
            "default": true,
            "MD013": { "line_length": 120 },
            "MD033": false,
            "MD041": false
          }
          JSON
          fi

      - name: Run markdownlint
        continue-on-error: true
        run: |
          markdownlint-cli2 "**/*.md" "#target" "#node_modules" || {
            echo "::warning::Markdown linting found issues. Please review and fix when possible."
            echo "Note: This is currently non-blocking to allow gradual improvement"
          }

  # Rust code quality checks
  rust-quality:
    name: Rust Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ubuntu-quality-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Run clippy (pedantic)
        run: cargo clippy --all-targets --all-features -- -W clippy::pedantic -W clippy::nursery -W clippy::cargo

      - name: Check formatting
        run: cargo fmt -- --check

      - name: Check for TODO/FIXME comments
        run: |
          # Check for TODOs but exclude test code and comments about TODOs
          TODO_COUNT=$(grep -r "TODO\|FIXME\|XXX\|HACK" src/ --exclude-dir=target |
                       grep -v "// Check for TODO" |
                       grep -v '"TODO"' |
                       grep -v "todo_count" |
                       wc -l)
          if [ "$TODO_COUNT" -gt 0 ]; then
            echo "Found $TODO_COUNT TODO/FIXME comments that should be addressed:"
            grep -r "TODO\|FIXME\|XXX\|HACK" src/ --exclude-dir=target |
              grep -v "// Check for TODO" |
              grep -v '"TODO"' |
              grep -v "todo_count"
            echo "Note: This check excludes test code and literal strings"
          fi

  # Security auditing
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run security audit
        run: cargo audit

      - name: Run cargo deny
        uses: EmbarkStudios/cargo-deny-action@v2
        continue-on-error: true
        with:
          log-level: warn
          command: check
          arguments: --all-features

  # Dependency analysis
  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: moderate

  # Code coverage
  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          components: llvm-tools-preview

      - name: Install cargo-llvm-cov
        run: cargo install cargo-llvm-cov

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ubuntu-coverage-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Generate coverage report
        run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          file: lcov.info
          fail_ci_if_error: false

  # License compliance
  license-check:
    name: License Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-license
        run: cargo install cargo-license

      - name: Check licenses
        run: |
          cargo license --json | jq -r '.[] |
          select(.license != "MIT" and .license != "Apache-2.0" and
          .license != "BSD-3-Clause" and .license != "ISC") |
          .name + ": " + .license'
