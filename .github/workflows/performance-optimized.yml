name: Performance Optimized CI

on:
  # Safe testing mode - manual triggers only
  # pull_request:
  #   types: [opened, synchronize, reopened]
  # push:
  #   branches: [main, develop]
  workflow_dispatch:
    inputs:
      test_reason:
        description: 'Reason for performance testing'
        required: false
        default: 'Performance optimization testing'

# Aggressive concurrency to cancel outdated runs
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0
  RUSTFLAGS: "-C target-cpu=native -C link-arg=-s"
  CARGO_NET_RETRY: 10
  RUST_BACKTRACE: short

jobs:
  # Ultra-fast validation (< 2 minutes)
  validate:
    name: Fast Validation
    runs-on: ubuntu-latest
    timeout-minutes: 3
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 1

      - id: cache-key
        run: echo "key=${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}" >> $GITHUB_OUTPUT

      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt

      - name: Format check (parallel)
        run: |
          # Check formatting in parallel
          cargo fmt --all -- --check &
          fmt_pid=$!

          # Quick file checks
          find . -name "*.rs" -size +100k -exec echo "Warning: Large file {}" \; &

          wait $fmt_pid

  # Parallel build and test shards
  build-test:
    name: Build & Test (Shard ${{ matrix.shard }})
    needs: validate
    runs-on: ubuntu-latest
    timeout-minutes: 10
    strategy:
      fail-fast: false
      matrix:
        shard: [1, 2, 3]
        include:
          - shard: 1
            test_args: "--lib"
          - shard: 2
            test_args: "--bins"
          - shard: 3
            test_args: "--tests --examples"

    steps:
      - uses: actions/checkout@v5

      - uses: dtolnay/rust-toolchain@stable

      - name: Aggressive caching
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ needs.validate.outputs.cache-key }}-shard-${{ matrix.shard }}
          restore-keys: |
            ${{ needs.validate.outputs.cache-key }}-shard-
            ${{ needs.validate.outputs.cache-key }}-

      - name: Parallel build
        run: |
          # Use all available cores
          export CARGO_BUILD_JOBS=$(nproc)
          cargo build --release --jobs $CARGO_BUILD_JOBS

      - name: Run test shard
        run: |
          export RUST_TEST_THREADS=$(nproc)
          cargo test --release ${{ matrix.test_args }} -- --test-threads=$RUST_TEST_THREADS

  # Cross-platform testing (parallel)
  cross-platform:
    name: Cross-platform (${{ matrix.os }})
    needs: validate
    runs-on: ${{ matrix.os }}
    timeout-minutes: 12
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest]

    steps:
      - uses: actions/checkout@v5

      - uses: dtolnay/rust-toolchain@stable

      - uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.os }}
          save-if: false  # Only restore, don't save

      - name: Fast build & test
        run: |
          cargo build --release
          cargo test --release --lib -- --nocapture

  # Lightweight checks (parallel)
  lightweight-checks:
    name: Lightweight Checks
    needs: validate
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v5

      - uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - uses: Swatinem/rust-cache@v2
        with:
          save-if: false

      - name: Parallel checks
        run: |
          # Run multiple checks in parallel
          cargo clippy --no-deps -- -W clippy::all &
          clippy_pid=$!

          cargo check --all-features &
          check_pid=$!

          # Documentation check
          cargo doc --no-deps --all-features &
          doc_pid=$!

          # Wait for all
          wait $clippy_pid $check_pid $doc_pid

  # Minimal security check
  security-quick:
    name: Quick Security
    needs: validate
    runs-on: ubuntu-latest
    timeout-minutes: 3
    continue-on-error: true
    steps:
      - uses: actions/checkout@v5

      - uses: dtolnay/rust-toolchain@stable

      - name: Quick audit
        run: |
          # Only check for critical vulnerabilities
          cargo audit --deny warnings --ignore RUSTSEC-2020-0071 || true

  # Final aggregation
  ci-complete:
    name: CI Complete
    runs-on: ubuntu-latest
    needs: [build-test, cross-platform, lightweight-checks]
    if: always()
    timeout-minutes: 1
    steps:
      - name: Check results
        run: |
          # Quick status check
          if [[ "${{ contains(needs.*.result, 'failure') }}" == "true" ]]; then
            echo "‚ùå Tests failed"
            exit 1
          fi
          echo "‚úÖ All checks passed in record time!"

      - name: Performance report
        if: success()
        run: |
          echo "üöÄ Performance Optimized CI Complete"
          echo "Target: < 10 minutes total"
          echo "Parallel jobs: 7+"
          echo "Sharded tests: 3 shards"
