name: CI/CD Optimized

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened, ready_for_review]
  workflow_dispatch:

# Concurrency controls to prevent redundant runs
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  CARGO_INCREMENTAL: 0
  RUSTFLAGS: "-C target-cpu=native"

jobs:
  # Quick validation checks - fail fast
  quick-check:
    name: Quick Validation
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Check for large files
        run: |
          # Fail if any file is over 5MB
          large_files=$(find . -type f -size +5M | grep -v "^./.git" || true)
          if [ -n "$large_files" ]; then
            echo "Error: Large files detected:"
            echo "$large_files"
            exit 1
          fi

      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache setup
        uses: Swatinem/rust-cache@v2
        with:
          cache-all-crates: true
          save-if: ${{ github.ref == 'refs/heads/main' }}

      - name: Format check
        run: cargo fmt --all -- --check

      - name: Quick clippy
        run: cargo clippy --no-deps -- -D warnings

  # Parallel testing strategy
  test-matrix:
    name: Test (${{ matrix.os }} / ${{ matrix.rust }})
    needs: quick-check
    runs-on: ${{ matrix.os }}
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        include:
          # Primary targets
          - os: ubuntu-latest
            rust: stable
            features: all
          - os: windows-latest
            rust: stable
            features: default
          - os: macos-latest
            rust: stable
            features: default
          # Beta testing (Linux only)
          - os: ubuntu-latest
            rust: beta
            features: all

    steps:
      - uses: actions/checkout@v5

      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}

      - uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.os }}-${{ matrix.rust }}
          cache-all-crates: true

      - name: Build
        run: |
          if [ "${{ matrix.features }}" = "all" ]; then
            cargo build --all-features --release
          else
            cargo build --release
          fi
        shell: bash

      - name: Test
        run: |
          if [ "${{ matrix.features }}" = "all" ]; then
            cargo test --all-features --release
          else
            cargo test --release
          fi
        shell: bash

      - name: Integration test
        if: matrix.os == 'ubuntu-latest'
        run: |
          ./target/release/batless --version
          ./target/release/batless README.md --mode=plain --max-lines=5
          ./target/release/batless Cargo.toml --mode=json --max-lines=3

  # Parallel documentation and coverage
  docs-coverage:
    name: Docs & Coverage
    needs: quick-check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v5

      - uses: dtolnay/rust-toolchain@stable
        with:
          components: llvm-tools-preview

      - uses: Swatinem/rust-cache@v2

      - name: Install cargo-llvm-cov
        run: |
          if ! command -v cargo-llvm-cov &> /dev/null; then
            cargo install cargo-llvm-cov --locked
          fi

      - name: Generate coverage
        run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info

      - name: Upload coverage
        uses: codecov/codecov-action@v5
        with:
          files: ./lcov.info
          fail_ci_if_error: false
          verbose: false

      - name: Build documentation
        run: cargo doc --all-features --no-deps

  # Security audit - can run in parallel
  security:
    name: Security Audit
    needs: quick-check
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v5

      - uses: dtolnay/rust-toolchain@stable

      - uses: Swatinem/rust-cache@v2

      - name: Install cargo-audit
        run: |
          if ! command -v cargo-audit &> /dev/null; then
            cargo install cargo-audit --locked
          fi

      - name: Security audit
        run: cargo audit --color never

  # Performance benchmarks (only on main)
  benchmark:
    name: Performance Benchmark
    if: github.ref == 'refs/heads/main'
    needs: [test-matrix]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v5

      - uses: dtolnay/rust-toolchain@stable

      - uses: Swatinem/rust-cache@v2

      - name: Run benchmarks
        run: |
          cargo build --release
          # Add actual benchmark commands here
          echo "Benchmarks would run here"

  # Final status check
  ci-status:
    name: CI Status
    runs-on: ubuntu-latest
    needs: [test-matrix, docs-coverage, security]
    if: always()
    steps:
      - name: Check status
        run: |
          if [[ "${{ contains(needs.*.result, 'failure') }}" == "true" ]]; then
            echo "❌ CI failed"
            exit 1
          elif [[ "${{ contains(needs.*.result, 'cancelled') }}" == "true" ]]; then
            echo "⚠️ CI cancelled"
            exit 1
          else
            echo "✅ CI passed"
          fi

      - name: Report timing
        if: success()
        run: |
          echo "Pipeline completed successfully!"
          echo "Total time: ~$(( $SECONDS / 60 )) minutes"
