name: Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag to release"
        required: true
        type: string

permissions:
  contents: write
  id-token: write
  packages: write

env:
  CARGO_TERM_COLOR: always

jobs:
  # Validation and tests
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Run tests
        run: |
          cargo test --all-features --verbose
          cargo clippy --all-targets --all-features -- -D warnings
          cargo fmt --all -- --check

      - name: Security audit
        run: |
          cargo install cargo-audit --quiet
          cargo audit

  # Build cross-platform binaries
  build:
    needs: test
    timeout-minutes: 45
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-20.04
            use-cross: false
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-20.04
            use-cross: true

          # macOS
          - target: x86_64-apple-darwin
            os: macos-12
            use-cross: false
          - target: aarch64-apple-darwin
            os: macos-12
            use-cross: false

          # Windows
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            use-cross: false

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools
        if: matrix.use-cross
        run: |
          cargo install cross --git https://github.com/cross-rs/cross --quiet

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build release binary
        run: |
          if [ "${{ matrix.use-cross }}" = "true" ]; then
            cross build --release --target=${{ matrix.target }}
          else
            cargo build --release --target=${{ matrix.target }}
          fi
        shell: bash

      - name: Create release archive
        shell: bash
        run: |
          TAG="${{ github.event.inputs.tag || github.ref_name }}"
          VERSION="${TAG#v}"
          TARGET="${{ matrix.target }}"

          # Determine binary extension and archive format
          if [[ "$TARGET" == *"windows"* ]]; then
            BINARY_EXT=".exe"
            ARCHIVE_EXT=".zip"
          else
            BINARY_EXT=""
            ARCHIVE_EXT=".tar.gz"
          fi

          BINARY_NAME="batless${BINARY_EXT}"
          ARCHIVE_NAME="batless-${VERSION}-${TARGET}${ARCHIVE_EXT}"

          # Copy binary
          cp "target/${TARGET}/release/${BINARY_NAME}" "${BINARY_NAME}"

          # Create archive
          if [[ "$TARGET" == *"windows"* ]]; then
            7z a "${ARCHIVE_NAME}" "${BINARY_NAME}" README.md LICENSE CHANGELOG.md
          else
            tar czf "${ARCHIVE_NAME}" "${BINARY_NAME}" README.md LICENSE CHANGELOG.md
          fi

          # Create checksum
          if [[ "$TARGET" == *"windows"* ]]; then
            certutil -hashfile "${ARCHIVE_NAME}" SHA256 | grep -v "hash of file" | grep -v "CertUtil" | tr -d '\r\n' > "${ARCHIVE_NAME}.sha256"
          else
            sha256sum "${ARCHIVE_NAME}" | cut -d' ' -f1 > "${ARCHIVE_NAME}.sha256"
          fi

          echo "ARCHIVE_NAME=${ARCHIVE_NAME}" >> $GITHUB_ENV
          echo "CHECKSUM_FILE=${ARCHIVE_NAME}.sha256" >> $GITHUB_ENV

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: batless-${{ matrix.target }}
          path: |
            ${{ env.ARCHIVE_NAME }}
            ${{ env.CHECKSUM_FILE }}

  # Create GitHub release and publish to crates.io
  release:
    needs: [test, build]
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Prepare release files
        run: |
          # Move all artifacts to release directory
          mkdir -p release
          find artifacts/ -name "*.tar.gz" -o -name "*.zip" -o -name "*.sha256" | while read file; do
            cp "$file" release/
          done

          # Create combined checksum file with verification
          cd release
          if ls *.sha256 1> /dev/null 2>&1; then
            cat *.sha256 > SHA256SUMS
            rm *.sha256
          else
            echo "Warning: No individual checksum files found"
          fi

          ls -la

      - name: Extract release information
        id: release-info
        run: |
          TAG="${{ github.event.inputs.tag || github.ref_name }}"
          VERSION="${TAG#v}"

          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

          # Extract changelog for this version
          if [ -f "CHANGELOG.md" ]; then
            # Get changelog section for this version
            awk "/^## \[${VERSION}\]/{flag=1; next} /^## \[/{flag=0} flag" CHANGELOG.md > release_notes.md

            # If no specific changelog found, create generic notes
            if [ ! -s release_notes.md ]; then
              echo "Release ${VERSION}" > release_notes.md
              echo "" >> release_notes.md
              echo "See [CHANGELOG.md](https://github.com/docdyhr/batless/blob/main/CHANGELOG.md) for detailed changes." >> release_notes.md
            fi
          else
            echo "Release ${VERSION}" > release_notes.md
            echo "" >> release_notes.md
            echo "## Features" >> release_notes.md
            echo "- Non-blocking code viewer for AI and automation" >> release_notes.md
            echo "- Syntax highlighting for 100+ programming languages" >> release_notes.md
            echo "- Multiple output modes: plain, highlight, JSON, summary" >> release_notes.md
            echo "- Cross-platform binaries for Linux, macOS, and Windows" >> release_notes.md
          fi

      - name: Publish to crates.io
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: |
          if [ -n "$CARGO_REGISTRY_TOKEN" ]; then
            echo "Publishing to crates.io..."
            # Dry run first to catch issues
            cargo publish --dry-run --allow-dirty
            # Actual publish with retry logic
            for i in {1..3}; do
              if cargo publish --allow-dirty; then
                echo "Successfully published to crates.io"
                break
              else
                echo "Attempt $i failed, retrying in 30 seconds..."
                sleep 30
              fi
            done
          else
            echo "::warning::CARGO_REGISTRY_TOKEN not set, skipping crates.io publication"
          fi

      - name: Create GitHub Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG="${{ steps.release-info.outputs.tag }}"
          VERSION="${{ steps.release-info.outputs.version }}"

          echo "Creating release for ${TAG}..."

          # Create release
          gh release create "${TAG}" \
            --title "Release ${VERSION}" \
            --notes-file release_notes.md \
            --draft=false \
            --prerelease=false \
            release/*

      - name: Prepare Homebrew update trigger
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        run: |
          TAG="${{ steps.release-info.outputs.tag }}"
          VERSION="${{ steps.release-info.outputs.version }}"
          echo "::notice::Release ${VERSION} created. The update-homebrew workflow will automatically update the Homebrew tap."


  # Post-release notifications and cleanup
  post-release:
    needs: [release]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: always()
    steps:
      - name: Release summary
        run: |
          TAG="${{ github.event.inputs.tag || github.ref_name }}"
          VERSION="${TAG#v}"

          echo "## ðŸš€ Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${VERSION}" >> $GITHUB_STEP_SUMMARY
          echo "**Tag:** ${TAG}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### âœ… Completed Tasks" >> $GITHUB_STEP_SUMMARY
          echo "- [x] Tests and validation" >> $GITHUB_STEP_SUMMARY
          echo "- [x] Cross-platform binary builds" >> $GITHUB_STEP_SUMMARY
          echo "- [x] GitHub release creation" >> $GITHUB_STEP_SUMMARY
          echo "- [x] Artifact uploads" >> $GITHUB_STEP_SUMMARY
          echo "- [x] Homebrew tap auto-update (via release event)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ðŸ“¦ Release Assets" >> $GITHUB_STEP_SUMMARY
          echo "- Linux (x86_64, aarch64)" >> $GITHUB_STEP_SUMMARY
          echo "- macOS (Intel, Apple Silicon)" >> $GITHUB_STEP_SUMMARY
          echo "- Windows (x86_64)" >> $GITHUB_STEP_SUMMARY
          echo "- Source code archives" >> $GITHUB_STEP_SUMMARY
          echo "- SHA256 checksums" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "ðŸŽ‰ **Release completed successfully!**" >> $GITHUB_STEP_SUMMARY
