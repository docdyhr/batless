name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release'
        required: true
        type: string

permissions:
  contents: write
  id-token: write
  packages: write

jobs:
  # Plan the release and generate matrix
  plan:
    runs-on: ubuntu-latest
    outputs:
      has-releases: ${{ steps.plan.outputs.has-releases }}
      releases: ${{ steps.plan.outputs.releases }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Install cargo-dist
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-dist
      - id: plan
        run: |
          cargo dist plan --tag="${{ github.event.inputs.tag || github.ref_name }}" --output-format=json > plan-dist-manifest.json
          echo "has-releases=$(jq -r .has_releases plan-dist-manifest.json)" >> $GITHUB_OUTPUT
          echo "releases<<EOF" >> $GITHUB_OUTPUT
          jq -c ".releases[]" plan-dist-manifest.json >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      - name: "Upload dist-manifest.json"
        uses: actions/upload-artifact@v4
        with:
          name: dist-manifest
          path: plan-dist-manifest.json

  # Build and upload binaries
  upload-local-artifacts:
    needs: plan
    if: ${{ needs.plan.outputs.has-releases == 'true' }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux targets
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-20.04
            install-dist: true
          - target: x86_64-unknown-linux-musl
            os: ubuntu-20.04
            install-dist: true
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-20.04
            install-dist: true
          
          # macOS targets  
          - target: x86_64-apple-darwin
            os: macos-12
            install-dist: true
          - target: aarch64-apple-darwin
            os: macos-12
            install-dist: true
            
          # Windows targets
          - target: x86_64-pc-windows-msvc
            os: windows-2022
            install-dist: true

    runs-on: ${{ matrix.os }}
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      BUILD_MANIFEST_NAME: target-${{ matrix.target }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      - name: Install cargo-dist
        if: ${{ matrix.install-dist }}
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-dist
      
      # Linux cross-compilation setup
      - name: Install cross-compilation tools (Linux)
        if: contains(matrix.target, 'linux') && !contains(matrix.target, 'x86_64-unknown-linux-gnu')
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-multilib
          
          if [[ "${{ matrix.target }}" == *"musl"* ]]; then
            sudo apt-get install -y musl-tools
          fi
          
          if [[ "${{ matrix.target }}" == "aarch64"* ]]; then
            sudo apt-get install -y gcc-aarch64-linux-gnu
          fi

      - name: Build artifacts
        run: |
          # Get the dist manifest
          cargo dist build --target=${{ matrix.target }} --output-format=json > dist-manifest.json

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BUILD_MANIFEST_NAME }}
          path: |
            dist-manifest.json
            target/distrib/**/*

  # Generate additional packages (deb, rpm, msi)
  generate-packages:
    needs: [plan, upload-local-artifacts]
    if: ${{ needs.plan.outputs.has-releases == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install tools
        run: |
          sudo apt-get update
          sudo apt-get install -y rpm alien nsis
          cargo install cargo-deb cargo-generate-rpm
          
      - name: Download Linux artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: target-*linux*
          merge-multiple: true
          path: artifacts/
      
      - name: Generate Debian packages
        run: |
          # Generate .deb packages for each Linux target
          for target in x86_64-unknown-linux-gnu x86_64-unknown-linux-musl aarch64-unknown-linux-gnu; do
            if [ -f "artifacts/target/distrib/$target/batless" ]; then
              cargo deb --target $target --no-build
            fi
          done
      
      - name: Generate RPM packages  
        run: |
          # Generate .rpm packages
          for target in x86_64-unknown-linux-gnu aarch64-unknown-linux-gnu; do
            if [ -f "artifacts/target/distrib/$target/batless" ]; then
              cargo generate-rpm --target $target
            fi
          done
      
      - name: Upload packages
        uses: actions/upload-artifact@v4
        with:
          name: packages
          path: |
            target/debian/*.deb
            target/generate-rpm/*.rpm

  # Create GitHub release
  announce:
    needs: [plan, upload-local-artifacts, generate-packages]
    if: ${{ needs.plan.outputs.has-releases == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: target-*
          merge-multiple: true
          path: artifacts/
          
      - name: Download packages
        uses: actions/download-artifact@v4
        with:
          name: packages
          path: packages/

      - name: Install cargo-dist
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-dist
          
      # Publish to crates.io
      - name: Publish to crates.io
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: |
          cargo publish --dry-run
          cargo publish

      # Create GitHub release
      - name: Create GitHub Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG="${{ github.event.inputs.tag || github.ref_name }}"
          
          # Extract version from tag (remove 'v' prefix)
          VERSION="${TAG#v}"
          
          # Generate release notes from CHANGELOG.md
          if [ -f "CHANGELOG.md" ]; then
            # Extract changelog section for this version
            sed -n "/^## \[${VERSION}\]/,/^## \[/{/^## \[${VERSION}\]/p; /^## \[/!p; /^## \[${VERSION}\]/!{/^## \[/q}}" CHANGELOG.md > release_notes.md
          else
            echo "Release ${VERSION}" > release_notes.md
          fi
          
          # Create release
          gh release create "${TAG}" \
            --title "Release ${VERSION}" \
            --notes-file release_notes.md \
            --draft=false \
            --prerelease=false \
            artifacts/target/distrib/*/* \
            packages/*.deb \
            packages/*.rpm
            
      # Generate and upload checksums
      - name: Generate checksums
        run: |
          cd artifacts/target/distrib/
          find . -type f -name "*" -exec sha256sum {} \; > ../../../SHA256SUMS
          cd ../../..
          
          # Upload checksums to release
          gh release upload "${{ github.event.inputs.tag || github.ref_name }}" SHA256SUMS

  # Update Homebrew formula in tap repository
  update-homebrew:
    needs: [announce]
    if: ${{ needs.plan.outputs.has-releases == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Update Homebrew tap
        env:
          GITHUB_TOKEN: ${{ secrets.HOMEBREW_TAP_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          TAG="${{ github.event.inputs.tag || github.ref_name }}"
          VERSION="${TAG#v}"
          
          # Download the source tarball to calculate SHA256
          curl -L "https://github.com/docdyhr/batless/archive/refs/tags/${TAG}.tar.gz" -o "batless-${VERSION}.tar.gz"
          SHA256=$(sha256sum "batless-${VERSION}.tar.gz" | cut -d' ' -f1)
          
          echo "Calculated SHA256: $SHA256"
          
          # Clone the tap repository
          git clone https://github.com/docdyhr/homebrew-batless.git tap-repo
          cd tap-repo
          
          # Configure git
          git config user.name "batless-bot"
          git config user.email "action@github.com"
          
          # Update the formula
          cat > Formula/batless.rb << EOF
          class Batless < Formula
            desc "Non-blocking, AI-friendly code viewer inspired by bat"
            homepage "https://github.com/docdyhr/batless"
            url "https://github.com/docdyhr/batless/archive/refs/tags/${TAG}.tar.gz"
            sha256 "${SHA256}"
            license "MIT"
            head "https://github.com/docdyhr/batless.git", branch: "main"
          
            depends_on "rust" => :build
          
            def install
              system "cargo", "install", *std_cargo_args
            end
          
            test do
              # Create a simple test file
              (testpath/"test.rs").write <<~EOS
                fn main() {
                    println!("Hello, batless!");
                }
              EOS
          
              # Test basic functionality
              assert_match "Hello, batless!", shell_output("#{bin}/batless #{testpath}/test.rs")
              
              # Test version output
              assert_match version.to_s, shell_output("#{bin}/batless --version")
              
              # Test help output
              assert_match "batless", shell_output("#{bin}/batless --help")
              
              # Test JSON mode
              json_output = shell_output("#{bin}/batless --mode=json #{testpath}/test.rs")
              assert_match '"mode": "json"', json_output
              
              # Test summary mode
              summary_output = shell_output("#{bin}/batless --mode=summary #{testpath}/test.rs")
              assert_match "fn main", summary_output
            end
          end
          EOF
          
          # Create commit and PR
          git add Formula/batless.rb
          
          if git diff --cached --quiet; then
            echo "No changes to formula"
          else
            git commit -m "Update batless to ${VERSION}
            
          - Update version to ${VERSION}
          - Update SHA256 checksum
          - Automated update from release workflow"
            
            # Create a new branch for the PR
            BRANCH="update-batless-${VERSION}"
            git checkout -b "$BRANCH"
            git push origin "$BRANCH"
            
            # Create PR using GitHub CLI
            gh pr create \
              --title "Update batless to ${VERSION}" \
              --body "Automated update of batless formula to version ${VERSION}.
              
            This PR was automatically created by the release workflow.
            
            Changes:
            - Update version to ${VERSION}
            - Update SHA256 checksum to ${SHA256}
            - Update download URL
            
            The formula has been tested in the main repository's CI pipeline." \
              --head "$BRANCH" \
              --base main \
              --repo docdyhr/homebrew-batless
            
            echo "Created PR for Homebrew formula update"
          fi

  # Build and push Docker images
  docker:
    needs: [announce]
    if: ${{ needs.plan.outputs.has-releases == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract version
        id: version
        run: |
          TAG="${{ github.event.inputs.tag || github.ref_name }}"
          VERSION="${TAG#v}"
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
      
      - name: Build and push Docker images
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ghcr.io/docdyhr/batless:latest
            ghcr.io/docdyhr/batless:${{ steps.version.outputs.version }}
          labels: |
            org.opencontainers.image.title=batless
            org.opencontainers.image.description=Non-blocking code viewer for AI and automation
            org.opencontainers.image.version=${{ steps.version.outputs.version }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}