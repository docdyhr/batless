name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release'
        required: true
        type: string

permissions:
  contents: write
  id-token: write
  packages: write

jobs:
  # Build and test
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Run tests
        run: |
          cargo test --all-features
          cargo clippy -- -D warnings
          cargo fmt --all -- --check

  # Build cross-platform binaries
  build:
    needs: test
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux targets
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-20.04
          - target: x86_64-unknown-linux-musl
            os: ubuntu-20.04
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-20.04
          
          # macOS targets  
          - target: x86_64-apple-darwin
            os: macos-12
          - target: aarch64-apple-darwin
            os: macos-12
            
          # Windows targets
          - target: x86_64-pc-windows-msvc
            os: windows-2022

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      # Linux cross-compilation setup
      - name: Install cross-compilation tools (Linux)
        if: contains(matrix.target, 'linux') && !contains(matrix.target, 'x86_64-unknown-linux-gnu')
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-multilib
          
          if [[ "${{ matrix.target }}" == *"musl"* ]]; then
            sudo apt-get install -y musl-tools
          fi
          
          if [[ "${{ matrix.target }}" == "aarch64"* ]]; then
            sudo apt-get install -y gcc-aarch64-linux-gnu
          fi

      - name: Build release binary
        run: |
          cargo build --release --target=${{ matrix.target }}
          
      - name: Create release archive
        shell: bash
        run: |
          TAG="${{ github.event.inputs.tag || github.ref_name }}"
          VERSION="${TAG#v}"
          
          if [[ "${{ matrix.os }}" == "windows-"* ]]; then
            ARCHIVE="batless-${VERSION}-${{ matrix.target }}.zip"
            cp target/${{ matrix.target }}/release/batless.exe batless.exe
            7z a "$ARCHIVE" batless.exe README.md LICENSE CHANGELOG.md
          else
            ARCHIVE="batless-${VERSION}-${{ matrix.target }}.tar.gz"
            cp target/${{ matrix.target }}/release/batless batless
            tar czf "$ARCHIVE" batless README.md LICENSE CHANGELOG.md
          fi
          
          echo "ARCHIVE=$ARCHIVE" >> $GITHUB_ENV

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: batless-${{ matrix.target }}
          path: ${{ env.ARCHIVE }}

  # Create GitHub release
  release:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
          
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      # Publish to crates.io
      - name: Publish to crates.io
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: |
          cargo publish --dry-run
          # cargo publish  # Uncomment when ready for actual publishing

      # Create GitHub release
      - name: Create GitHub Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG="${{ github.event.inputs.tag || github.ref_name }}"
          VERSION="${TAG#v}"
          
          # Generate release notes from CHANGELOG.md
          if [ -f "CHANGELOG.md" ]; then
            # Extract changelog section for this version
            sed -n "/^## \[${VERSION}\]/,/^## \[/{/^## \[${VERSION}\]/p; /^## \[/!p; /^## \[${VERSION}\]/!{/^## \[/q}}" CHANGELOG.md > release_notes.md
          else
            echo "Release ${VERSION}" > release_notes.md
            echo "" >> release_notes.md
            echo "## Features" >> release_notes.md
            echo "- Non-blocking code viewer for AI and automation" >> release_notes.md
            echo "- Syntax highlighting for 100+ programming languages" >> release_notes.md
            echo "- Multiple output modes: plain, highlight, JSON, summary" >> release_notes.md
            echo "- Cross-platform binaries for Linux, macOS, and Windows" >> release_notes.md
          fi
          
          # Create release
          gh release create "${TAG}" \
            --title "Release ${VERSION}" \
            --notes-file release_notes.md \
            --draft=false \
            --prerelease=false \
            artifacts/*/*.tar.gz \
            artifacts/*/*.zip
            
      # Generate and upload checksums
      - name: Generate checksums
        run: |
          cd artifacts/
          find . -name "*.tar.gz" -o -name "*.zip" | xargs sha256sum > ../SHA256SUMS
          cd ..
          
          # Upload checksums to release
          gh release upload "${{ github.event.inputs.tag || github.ref_name }}" SHA256SUMS

  # Update Homebrew formula in tap repository
  update-homebrew:
    needs: [release]
    runs-on: ubuntu-latest
    steps:
      - name: Update Homebrew tap
        env:
          GITHUB_TOKEN: ${{ secrets.HOMEBREW_TAP_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          TAG="${{ github.event.inputs.tag || github.ref_name }}"
          VERSION="${TAG#v}"
          
          # Download the source tarball to calculate SHA256
          curl -L "https://github.com/docdyhr/batless/archive/refs/tags/${TAG}.tar.gz" -o "batless-${VERSION}.tar.gz"
          SHA256=$(sha256sum "batless-${VERSION}.tar.gz" | cut -d' ' -f1)
          
          echo "Calculated SHA256: $SHA256"
          
          # Clone the tap repository
          git clone https://github.com/docdyhr/homebrew-batless.git tap-repo
          cd tap-repo
          
          # Configure git
          git config user.name "batless-bot"
          git config user.email "action@github.com"
          
          # Update the formula
          cat > Formula/batless.rb << EOF
          class Batless < Formula
            desc "Non-blocking, AI-friendly code viewer inspired by bat"
            homepage "https://github.com/docdyhr/batless"
            url "https://github.com/docdyhr/batless/archive/refs/tags/${TAG}.tar.gz"
            sha256 "${SHA256}"
            license "MIT"
            head "https://github.com/docdyhr/batless.git", branch: "main"
          
            depends_on "rust" => :build
          
            def install
              system "cargo", "install", *std_cargo_args
            end
          
            test do
              # Create a simple test file
              (testpath/"test.rs").write <<~EOS
                fn main() {
                    println!("Hello, batless!");
                }
              EOS
          
              # Test basic functionality
              assert_match "Hello, batless!", shell_output("#{bin}/batless #{testpath}/test.rs")
              
              # Test version output
              assert_match version.to_s, shell_output("#{bin}/batless --version")
              
              # Test help output
              assert_match "batless", shell_output("#{bin}/batless --help")
              
              # Test JSON mode
              json_output = shell_output("#{bin}/batless --mode=json #{testpath}/test.rs")
              assert_match '"mode": "json"', json_output
              
              # Test summary mode
              summary_output = shell_output("#{bin}/batless --mode=summary #{testpath}/test.rs")
              assert_match "fn main", summary_output
            end
          end
          EOF
          
          # Create commit and push directly to main (simplified for now)
          git add Formula/batless.rb
          
          if ! git diff --cached --quiet; then
            git commit -m "Update batless to ${VERSION}"
            git push origin main
            echo "Updated Homebrew formula to ${VERSION}"
          else
            echo "No changes to formula"
          fi