name: CI/CD Status Dashboard

on:
  schedule:
    # Update dashboard every hour
    - cron: "0 * * * *"
  workflow_dispatch:

permissions:
  contents: write
  issues: write

jobs:
  update-dashboard:
    name: Update CI/CD Dashboard
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Generate dashboard
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            
            // Get recent workflow runs
            const workflows = await github.rest.actions.listWorkflowRuns({
              owner,
              repo,
              per_page: 50,
              status: 'completed'
            });
            
            // Calculate success rates
            const successRates = {};
            workflows.data.workflow_runs.forEach(run => {
              if (!successRates[run.name]) {
                successRates[run.name] = { total: 0, success: 0 };
              }
              successRates[run.name].total++;
              if (run.conclusion === 'success') {
                successRates[run.name].success++;
              }
            });
            
            // Generate dashboard content
            let dashboard = '# 🔧 CI/CD Pipeline Dashboard\n\n';
            dashboard += '> Last updated: ' + new Date().toISOString() + '\n\n';
            dashboard += '## Workflow Success Rates (Last 50 Runs)\n\n';
            dashboard += '| Workflow | Success Rate | Status |\n';
            dashboard += '|----------|--------------|--------|\n';
            
            Object.entries(successRates).forEach(([name, stats]) => {
              const rate = (stats.success / stats.total * 100).toFixed(1);
              const status = rate >= 90 ? '✅ Healthy' : rate >= 75 ? '⚠️ Warning' : '❌ Critical';
              dashboard += `| ${name} | ${rate}% (${stats.success}/${stats.total}) | ${status} |\n`;
            });
            
            dashboard += '\n## Quick Links\n\n';
            dashboard += '- [All Workflows](https://github.com/' + owner + '/' + repo + '/actions)\n';
            dashboard += '- [Failed Runs](https://github.com/' + owner + '/' + repo + '/actions?query=is%3Afailure)\n';
            dashboard += '- [Pipeline Health Script](https://github.com/' + owner + '/' + repo + '/blob/main/scripts/pipeline-health-check.sh)\n';
            
            console.log(dashboard);
            
            // Update or create dashboard issue
            const issues = await github.rest.issues.listForRepo({
              owner,
              repo,
              labels: 'dashboard',
              state: 'open'
            });
            
            if (issues.data.length > 0) {
              // Update existing dashboard
              await github.rest.issues.update({
                owner,
                repo,
                issue_number: issues.data[0].number,
                body: dashboard
              });
            } else {
              // Create new dashboard
              await github.rest.issues.create({
                owner,
                repo,
                title: '📊 CI/CD Pipeline Dashboard',
                body: dashboard,
                labels: ['dashboard', 'automation']
              });
            }