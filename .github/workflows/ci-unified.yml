name: Unified CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [ opened, synchronize, reopened ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUSTFLAGS: "-D warnings"

jobs:
  # Quick validation that runs first
  quick-check:
    name: Quick Validation
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v5

      - name: Validate YAML files
        run: |
          for file in .github/workflows/*.yml; do
            echo "Checking $file..."
            python -c "import yaml; yaml.safe_load(open('$file'))" || exit 1
          done

      - name: Check for large files
        run: |
          large_files=$(find . -type f -size +1M -not -path "./.git/*" -not -path "./target/*" | head -5)
          if [ -n "$large_files" ]; then
            echo "⚠️ Large files detected:"
            echo "$large_files"
          fi

  # Rust toolchain setup and caching
  build:
    name: Build & Test
    needs: quick-check
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [stable]
        include:
          - os: ubuntu-latest
            rust: nightly
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust }}
          components: rustfmt, clippy

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.rust }}-
            ${{ runner.os }}-cargo-

      - name: Build
        run: cargo build --verbose --all-features

      - name: Run tests
        run: cargo test --verbose --all-features

      - name: Run clippy
        if: matrix.rust == 'stable'
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Check formatting
        if: matrix.rust == 'stable' && matrix.os == 'ubuntu-latest'
        run: cargo fmt --all -- --check

  # Code coverage job
  coverage:
    name: Code Coverage
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v5

      - uses: dtolnay/rust-toolchain@stable
        with:
          components: llvm-tools-preview

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-coverage-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-coverage-
            ${{ runner.os }}-cargo-

      - name: Install cargo-llvm-cov
        run: |
          if ! command -v cargo-llvm-cov &> /dev/null; then
            cargo install cargo-llvm-cov
          fi

      - name: Generate coverage
        run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: lcov.info
          flags: unittests
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

  # Security scanning
  security:
    name: Security Scan
    needs: quick-check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v5

      - uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-audit-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-audit-

      - name: Install cargo-audit
        run: |
          if ! command -v cargo-audit &> /dev/null; then
            cargo install cargo-audit
          fi

      - name: Security audit
        run: |
          cargo audit || echo "::warning::Security vulnerabilities found"

      - name: Check dependencies
        run: |
          cargo tree --duplicates
          cargo outdated || true

  # Performance benchmarking (only on main branch)
  benchmark:
    name: Performance Benchmark
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v5

      - uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-bench-${{ hashFiles('**/Cargo.lock') }}

      - name: Install hyperfine
        run: |
          if ! command -v hyperfine &> /dev/null; then
            cargo install hyperfine
          fi

      - name: Build release
        run: cargo build --release

      - name: Run benchmarks
        run: |
          echo "Running performance benchmarks..."
          if [ -f "benchmark_files/medium.rs" ]; then
            hyperfine --warmup 3 \
              './target/release/batless benchmark_files/medium.rs --mode=plain' \
              './target/release/batless benchmark_files/medium.rs --mode=highlight' \
              './target/release/batless benchmark_files/medium.rs --mode=json' \
              './target/release/batless benchmark_files/medium.rs --mode=summary' \
              --export-markdown benchmark-results.md

            cat benchmark-results.md >> $GITHUB_STEP_SUMMARY
          fi

  # Final status check
  ci-status:
    name: CI Status Check
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [build, coverage, security]
    if: always()
    steps:
      - name: Check CI Status
        run: |
          if [[ "${{ contains(needs.*.result, 'failure') }}" == "true" ]]; then
            echo "❌ CI Pipeline Failed"
            echo "Failed jobs: ${{ toJSON(needs) }}"
            exit 1
          elif [[ "${{ contains(needs.*.result, 'cancelled') }}" == "true" ]]; then
            echo "⚠️ CI Pipeline Cancelled"
            exit 1
          else
            echo "✅ CI Pipeline Passed"
          fi

      - name: Create status summary
        if: always()
        run: |
          echo "## CI/CD Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Quick Check | ${{ needs.quick-check.result || 'N/A' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build & Test | ${{ needs.build.result || 'N/A' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Coverage | ${{ needs.coverage.result || 'N/A' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security | ${{ needs.security.result || 'N/A' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Benchmark | ${{ needs.benchmark.result || 'N/A' }} |" >> $GITHUB_STEP_SUMMARY
