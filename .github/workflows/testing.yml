name: Enhanced Testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run comprehensive tests weekly
    - cron: '0 3 * * 1'

permissions:
  contents: read
  checks: write
  pull-requests: write

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta, nightly]
        exclude:
          - os: windows-latest
            rust: nightly
          - os: macos-latest
            rust: nightly

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          components: rustfmt, clippy

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ matrix.rust }}-test-${{ hashFiles('**/Cargo.lock') }}

      - name: Run unit tests
        run: |
          cargo test --lib --all-features --verbose
          cargo test --doc --all-features --verbose

      - name: Run integration tests
        run: cargo test --test integration_tests --all-features --verbose

      - name: Test with minimal features
        run: cargo test --no-default-features --verbose

  property-based-testing:
    name: Property-Based Testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-proptest-${{ hashFiles('**/Cargo.lock') }}

      - name: Add property testing dependencies
        run: |
          # Add proptest to Cargo.toml temporarily for this workflow
          echo "
          [dev-dependencies.proptest]
          version = \"1.4\"
          default-features = false
          features = [\"std\"]" >> Cargo.toml

      - name: Run property-based tests
        run: |
          # Create property-based tests
          mkdir -p tests/property
          cat > tests/property/mod.rs << 'EOF'
          use batless::{process_file, BatlessConfig, highlight_content};
          use proptest::prelude::*;
          use std::io::Write;
          use tempfile::NamedTempFile;

          proptest! {
              #[test]
              fn test_process_file_never_panics(
                  content in ".*", 
                  max_lines in 1usize..10000,
                  max_bytes in proptest::option::of(1usize..100000)
              ) {
                  let mut file = NamedTempFile::new().unwrap();
                  file.write_all(content.as_bytes()).unwrap();
                  
                  let config = BatlessConfig {
                      max_lines,
                      max_bytes,
                      ..Default::default()
                  };
                  
                  // Should never panic
                  let _result = process_file(file.path().to_str().unwrap(), &config);
              }
              
              #[test] 
              fn test_highlight_content_idempotent(content in ".*") {
                  let config = BatlessConfig::default();
                  
                  // Highlighting should be deterministic
                  let result1 = highlight_content(&content, "test.rs", &config);
                  let result2 = highlight_content(&content, "test.rs", &config);
                  
                  prop_assert_eq!(result1.is_ok(), result2.is_ok());
              }
              
              #[test]
              fn test_max_lines_respected(
                  lines in prop::collection::vec(".*", 1..100),
                  max_lines in 1usize..50
              ) {
                  let content = lines.join("\n");
                  let mut file = NamedTempFile::new().unwrap();
                  file.write_all(content.as_bytes()).unwrap();
                  
                  let config = BatlessConfig {
                      max_lines,
                      ..Default::default()
                  };
                  
                  if let Ok(result) = process_file(file.path().to_str().unwrap(), &config) {
                      prop_assert!(result.lines.len() <= max_lines);
                  }
              }
          }
          EOF
          
          # Add the module to integration tests
          echo "mod property;" >> tests/integration_tests.rs
          
          cargo test tests::property --verbose

  fuzz-testing:
    name: Fuzz Testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust nightly
        uses: dtolnay/rust-toolchain@nightly

      - name: Install cargo-fuzz
        run: cargo install cargo-fuzz

      - name: Cache fuzz targets
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            fuzz/target
          key: ${{ runner.os }}-fuzz-${{ hashFiles('**/Cargo.lock') }}

      - name: Initialize fuzz targets
        run: |
          cargo fuzz init
          
          # Create fuzz target for file processing
          cargo fuzz add process_file
          
          cat > fuzz/fuzz_targets/process_file.rs << 'EOF'
          #![no_main]
          use libfuzzer_sys::fuzz_target;
          use batless::{process_file, BatlessConfig};
          use std::io::Write;
          use tempfile::NamedTempFile;

          fuzz_target!(|data: &[u8]| {
              // Create temporary file with fuzz data
              let mut file = NamedTempFile::new().unwrap();
              let _ = file.write_all(data);
              
              let config = BatlessConfig::default();
              
              // Should not panic or crash
              let _ = process_file(file.path().to_str().unwrap(), &config);
          });
          EOF

      - name: Run fuzz tests (short duration for CI)
        run: |
          timeout 300 cargo fuzz run process_file -- -max_total_time=300 || true
          
          # Check if any crashes were found
          if [ -d "fuzz/artifacts/process_file" ] && [ "$(ls -A fuzz/artifacts/process_file)" ]; then
            echo "❌ Fuzz testing found crashes!"
            ls -la fuzz/artifacts/process_file/
            exit 1
          else
            echo "✅ No crashes found in fuzz testing"
          fi

  stress-testing:
    name: Stress Testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Build release binary
        run: cargo build --release

      - name: Create stress test files
        run: |
          # Create various large test files
          mkdir -p stress_test_files
          
          # Large text file (10MB)
          dd if=/dev/zero bs=1024 count=10240 | tr '\0' 'A' > stress_test_files/large.txt
          
          # File with very long lines
          python3 -c "print('x' * 100000)" > stress_test_files/long_line.txt
          
          # Binary file
          dd if=/dev/urandom bs=1024 count=1024 > stress_test_files/binary.bin
          
          # Deep nested JSON
          python3 -c "
          import json
          data = 'test'
          for i in range(1000):
              data = {'nested': data}
          with open('stress_test_files/deep.json', 'w') as f:
              json.dump(data, f)" || echo "Skipped deep JSON creation"

      - name: Stress test with large files
        timeout-minutes: 10
        run: |
          for file in stress_test_files/*; do
            echo "Testing with $file"
            timeout 30 ./target/release/batless "$file" --max-lines=100 || echo "Handled: $file"
            timeout 30 ./target/release/batless "$file" --mode=json --max-lines=10 || echo "Handled: $file"
          done

      - name: Memory usage test
        run: |
          # Monitor memory usage with large files
          if command -v valgrind &> /dev/null; then
            valgrind --tool=memcheck --leak-check=full --error-exitcode=1 \
              ./target/release/batless stress_test_files/large.txt --max-lines=1000
          else
            # Use built-in monitoring if valgrind not available
            ./target/release/batless stress_test_files/large.txt --max-lines=1000
          fi

  compatibility-testing:
    name: Compatibility Testing
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: [1.70.0, 1.75.0, stable, beta]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust ${{ matrix.rust }}
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}

      - name: Test compilation
        run: cargo check --all-features

      - name: Test basic functionality
        run: cargo test --lib

  mutation-testing:
    name: Mutation Testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust nightly
        uses: dtolnay/rust-toolchain@nightly

      - name: Install cargo-mutants
        run: cargo install cargo-mutants

      - name: Run mutation tests (subset)
        run: |
          # Run mutation testing on core functionality only (time-limited for CI)
          timeout 600 cargo mutants --timeout 30 --jobs 2 \
            --package batless --no-shuffle || echo "Mutation testing completed"

  test-report:
    name: Test Report
    runs-on: ubuntu-latest
    if: always()
    needs: [unit-tests, property-based-testing, fuzz-testing, stress-testing]
    steps:
      - name: Download test artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true

      - name: Generate test report
        run: |
          echo "# Test Summary" > test-report.md
          echo "" >> test-report.md
          echo "## Test Results" >> test-report.md
          echo "- Unit Tests: ${{ needs.unit-tests.result }}" >> test-report.md
          echo "- Property-Based Tests: ${{ needs.property-based-testing.result }}" >> test-report.md
          echo "- Fuzz Tests: ${{ needs.fuzz-testing.result }}" >> test-report.md
          echo "- Stress Tests: ${{ needs.stress-testing.result }}" >> test-report.md

      - name: Comment PR with test results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('test-report.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });