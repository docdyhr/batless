name: Security Review

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scans daily at 02:00 UTC
    - cron: '0 2 * * *'
  workflow_dispatch: # Allow manual triggers

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-security-${{ hashFiles('**/Cargo.lock') }}

      - name: Install security tools
        run: |
          # Install tools with --locked for reproducible builds
          cargo install cargo-audit cargo-deny cargo-outdated --locked

      - name: Run cargo audit
        run: |
          cargo audit --color never --json > audit-results.json || true
          cargo audit --color never

      - name: Run cargo deny
        run: cargo deny check

      - name: Check for outdated dependencies
        continue-on-error: true
        run: |
          cargo outdated --exit-code 1 --root-deps-only || echo "⚠️ Outdated dependencies found - consider updating"

      - name: Upload audit results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-results
          path: audit-results.json

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: moderate
          allow-licenses: MIT, Apache-2.0, BSD-3-Clause, ISC, MPL-2.0

  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
      actions: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: rust
          queries: +security-and-quality

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Build for analysis
        run: cargo build --all-features

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:rust"

  semgrep:
    name: Semgrep Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Semgrep
        uses: semgrep/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/rust
            p/secrets
          generateSarif: "1"

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif
        if: always()

  supply-chain-security:
    name: Supply Chain Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Generate SBOM
        run: |
          cargo install cargo-cyclonedx
          cargo cyclonedx --format json --output-cdx batless-sbom.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: software-bill-of-materials
          path: batless-sbom.json

  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Check licenses
        run: |
          cargo install cargo-license
          cargo license --json > licenses.json
          
          # Check for problematic licenses
          if cargo license | grep -E "(GPL|AGPL|SSPL|BSL)"; then
            echo "❌ Problematic license found"
            exit 1
          else
            echo "✅ All licenses are compatible"
          fi

      - name: Upload license report
        uses: actions/upload-artifact@v4
        with:
          name: license-report
          path: licenses.json

  security-scorecard:
    name: OSSF Scorecard
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      id-token: write
      contents: read
      actions: read
    steps:
      - name: Run analysis
        uses: ossf/scorecard-action@v2.4.0
        with:
          results_file: results.sarif
          results_format: sarif
          publish_results: true
          repo_token: ${{ secrets.SCORECARD_READ_TOKEN || secrets.GITHUB_TOKEN }}

      - name: Upload SARIF results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif