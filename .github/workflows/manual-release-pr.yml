name: Manual Release (PR-based)

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 0.1.2)'
        required: true
        type: string
      create_tag:
        description: 'Create and push tag after PR merge'
        required: true
        type: boolean
        default: true
      dry_run:
        description: 'Dry run (skip actual PR creation)'
        required: true
        type: boolean
        default: false

permissions:
  contents: write
  pull-requests: write
  id-token: write
  packages: write

jobs:
  prepare-release:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.prepare.outputs.tag }}
      version: ${{ steps.prepare.outputs.version }}
      branch: ${{ steps.prepare.outputs.branch }}
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare release
        id: prepare
        env:
          VERSION: ${{ github.event.inputs.version }}
          CREATE_TAG: ${{ github.event.inputs.create_tag }}
          DRY_RUN: ${{ github.event.inputs.dry_run }}
        run: |
          TAG="v${VERSION}"
          BRANCH="release/${VERSION}"

          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "branch=${BRANCH}" >> $GITHUB_OUTPUT

          echo "## Release Preparation" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** ${VERSION}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag:** ${TAG}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** ${BRANCH}" >> $GITHUB_STEP_SUMMARY
          echo "- **Create Tag:** ${CREATE_TAG}" >> $GITHUB_STEP_SUMMARY
          echo "- **Dry Run:** ${DRY_RUN}" >> $GITHUB_STEP_SUMMARY

      - name: Validate version format
        env:
          VERSION: ${{ steps.prepare.outputs.version }}
        run: |
          if ! echo "$VERSION" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$'; then
            echo "::error::Version must be in format X.Y.Z (e.g., 0.1.2)"
            exit 1
          fi

      - name: Check if tag exists
        env:
          TAG: ${{ steps.prepare.outputs.tag }}
        run: |
          if git tag -l | grep -q "^${TAG}$"; then
            echo "::error::Tag ${TAG} already exists"
            exit 1
          fi

      - name: Create release branch
        if: github.event.inputs.dry_run == 'false'
        env:
          BRANCH: ${{ steps.prepare.outputs.branch }}
        run: |
          git checkout -b "${BRANCH}"

      - name: Update version in Cargo.toml
        if: github.event.inputs.dry_run == 'false'
        env:
          VERSION: ${{ steps.prepare.outputs.version }}
        run: |
          sed -i "s/^version = \".*\"/version = \"${VERSION}\"/" Cargo.toml

          # Verify the change
          grep "^version = \"${VERSION}\"" Cargo.toml || {
            echo "::error::Failed to update version in Cargo.toml"
            exit 1
          }

      - name: Update Cargo.lock
        if: github.event.inputs.dry_run == 'false'
        run: |
          # Update Cargo.lock to reflect new version
          cargo update --workspace

      - name: Update CHANGELOG.md
        if: github.event.inputs.dry_run == 'false'
        env:
          VERSION: ${{ steps.prepare.outputs.version }}
        run: |
          TAG="v${VERSION}"
          chmod +x scripts/prep-release-changelog.sh
          # Use git-cliff via helper script to regenerate full CHANGELOG with new tag section
          scripts/prep-release-changelog.sh "${TAG}" || {
            echo "::error::Failed to generate changelog for ${TAG}"; exit 1; }
          # Ensure the generated file contains the new version header
          grep "^## \[${TAG#v}\]" CHANGELOG.md || {
            echo "::error::CHANGELOG.md does not contain expected section for ${TAG}"; cat CHANGELOG.md | head -100; exit 1; }

      - name: Commit version changes
        if: github.event.inputs.dry_run == 'false'
        env:
          VERSION: ${{ steps.prepare.outputs.version }}
          BRANCH: ${{ steps.prepare.outputs.branch }}
        run: |
          git config user.name "Release Bot"
          git config user.email "release-bot@github.com"

          git add Cargo.toml Cargo.lock CHANGELOG.md
          git commit -m "chore(release): prepare v${VERSION}"
          git push origin "${BRANCH}"

      - name: Create Pull Request
        if: github.event.inputs.dry_run == 'false'
        env:
          GH_TOKEN: ${{ github.token }}
          VERSION: ${{ steps.prepare.outputs.version }}
          TAG: ${{ steps.prepare.outputs.tag }}
          BRANCH: ${{ steps.prepare.outputs.branch }}
        run: |
          PR_BODY=$(cat << EOF
          ## Release ${VERSION}

          This PR was automatically generated to prepare release ${VERSION}.

          ### Changes
          - Updated version in Cargo.toml to ${VERSION}
          - Updated Cargo.lock
          - Added changelog entry for ${VERSION}

          ### Post-merge actions
          After this PR is merged:
          - Tag ${TAG} will be created automatically
          - The release workflow will be triggered by the new tag
          - Binaries will be built and published to GitHub Releases
          - The crate will be published to crates.io

          ### Checklist
          - [ ] All CI checks pass
          - [ ] Version number is correct
          - [ ] Changelog is updated appropriately
          - [ ] Ready to release

          ---
          *This PR was created by the Manual Release workflow*
          EOF
          )

          gh pr create \
            --title "Release ${VERSION}" \
            --body "${PR_BODY}" \
            --base main \
            --head "${BRANCH}" \
            --label "release" \
            --label "automated"

  dry-run-summary:
    needs: prepare-release
    if: github.event.inputs.dry_run == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Dry run summary
        env:
          VERSION: ${{ needs.prepare-release.outputs.version }}
          TAG: ${{ needs.prepare-release.outputs.tag }}
          BRANCH: ${{ needs.prepare-release.outputs.branch }}
        run: |
          echo "## ðŸ§ª Dry Run Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${VERSION}" >> $GITHUB_STEP_SUMMARY
          echo "**Tag:** ${TAG}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${BRANCH}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### What would happen in a real release:" >> $GITHUB_STEP_SUMMARY
          echo "1. Create release branch: ${BRANCH}" >> $GITHUB_STEP_SUMMARY
          echo "2. Update version in Cargo.toml to ${VERSION}" >> $GITHUB_STEP_SUMMARY
          echo "3. Update Cargo.lock" >> $GITHUB_STEP_SUMMARY
          echo "4. Update CHANGELOG.md with new release entry" >> $GITHUB_STEP_SUMMARY
          echo "5. Commit changes to release branch" >> $GITHUB_STEP_SUMMARY
          echo "6. Create PR from ${BRANCH} to main" >> $GITHUB_STEP_SUMMARY
          echo "7. After PR merge, tag ${TAG} would be created" >> $GITHUB_STEP_SUMMARY
          echo "8. Release workflow would be triggered automatically" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**No actual changes were made.** Re-run with dry_run=false to perform the release." >> $GITHUB_STEP_SUMMARY
