name: Repository Health Check

on:
  schedule:
    # Run daily at 6 AM UTC
    - cron: '0 6 * * *'
  workflow_dispatch:

permissions:
  contents: read
  issues: write

jobs:
  health-check:
    name: Repository Health Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Check for common issues
        id: issues
        run: |
          echo "# Repository Health Report" > health-report.md
          echo "Generated on: $(date -u)" >> health-report.md
          echo "" >> health-report.md

          ISSUES_FOUND=0

          # Check for large files
          echo "## Large Files Check" >> health-report.md
          LARGE_FILES=$(find . -type f -size +1M -not -path "./.git/*" -not -path "./target/*" | head -10)
          if [ -n "$LARGE_FILES" ]; then
            echo "⚠️ Large files found (>1MB):" >> health-report.md
            echo '```' >> health-report.md
            echo "$LARGE_FILES" >> health-report.md
            echo '```' >> health-report.md
            ISSUES_FOUND=$((ISSUES_FOUND + 1))
          else
            echo "✅ No large files found" >> health-report.md
          fi
          echo "" >> health-report.md

          # Check for outdated workflows
          echo "## Workflow File Ages" >> health-report.md
          OLD_WORKFLOWS=$(find .github/workflows -name "*.yml" -mtime +90)
          if [ -n "$OLD_WORKFLOWS" ]; then
            echo "⚠️ Workflows not updated in 90+ days:" >> health-report.md
            echo '```' >> health-report.md
            echo "$OLD_WORKFLOWS" >> health-report.md
            echo '```' >> health-report.md
            ISSUES_FOUND=$((ISSUES_FOUND + 1))
          else
            echo "✅ All workflows recently updated" >> health-report.md
          fi
          echo "" >> health-report.md

          # Check for TODO/FIXME comments
          echo "## Code Quality Issues" >> health-report.md
          TODO_COUNT=$(grep -r "TODO\|FIXME\|XXX\|HACK" src/ 2>/dev/null | wc -l || echo "0")
          if [ "$TODO_COUNT" -gt 5 ]; then
            echo "⚠️ Found $TODO_COUNT TODO/FIXME comments" >> health-report.md
            echo '```' >> health-report.md
            grep -rn "TODO\|FIXME\|XXX\|HACK" src/ 2>/dev/null | head -10 >> health-report.md
            echo '```' >> health-report.md
            ISSUES_FOUND=$((ISSUES_FOUND + 1))
          else
            echo "✅ TODO/FIXME count is reasonable ($TODO_COUNT)" >> health-report.md
          fi
          echo "" >> health-report.md

          # Check Cargo.toml health
          echo "## Dependency Health" >> health-report.md
          DUPLICATES_OUTPUT=$(cargo tree --duplicates 2>/dev/null || echo "")
          # Filter out harmless duplicates (different major versions of common utility crates)
          # Only flag as problematic if there are duplicates that aren't just bitflags v1/v2
          if echo "$DUPLICATES_OUTPUT" | grep -q "└──"; then
            # Check if there are non-bitflags duplicates
            NON_BITFLAGS_DUPLICATES=$(echo "$DUPLICATES_OUTPUT" | grep -E "^[a-zA-Z]" | grep -v "^bitflags v[12]\." || true)
            if [ -n "$NON_BITFLAGS_DUPLICATES" ] && [ "$NON_BITFLAGS_DUPLICATES" != "" ]; then
              echo "⚠️ Duplicate dependencies found:" >> health-report.md
              echo '```' >> health-report.md
              echo "$DUPLICATES_OUTPUT" >> health-report.md
              echo '```' >> health-report.md
              ISSUES_FOUND=$((ISSUES_FOUND + 1))
            else
              echo "✅ No concerning duplicate dependencies" >> health-report.md
              echo "" >> health-report.md
              echo "**Note:** Some harmless version differences exist in utility crates (bitflags v1/v2), which is normal when mixing dependencies that haven't fully migrated to bitflags v2." >> health-report.md
            fi
          else
            echo "✅ No duplicate dependencies" >> health-report.md
          fi
          echo "" >> health-report.md

          # Check for dead code (simplified)
          echo "## Code Coverage Analysis" >> health-report.md
          if command -v cargo &> /dev/null; then
            # Simple check for unused imports
            UNUSED_IMPORTS=$(cargo check 2>&1 | grep -c "unused import" || echo "0")
            if [ "$UNUSED_IMPORTS" -gt 0 ]; then
              echo "⚠️ Found $UNUSED_IMPORTS unused imports" >> health-report.md
              ISSUES_FOUND=$((ISSUES_FOUND + 1))
            else
              echo "✅ No unused imports detected" >> health-report.md
            fi
          fi
          echo "" >> health-report.md

          # Summary
          echo "## Summary" >> health-report.md
          if [ "$ISSUES_FOUND" -eq 0 ]; then
            echo "🎉 Repository is healthy! No issues found." >> health-report.md
            echo "HEALTH_STATUS=healthy" >> $GITHUB_ENV
          else
            echo "⚠️ Found $ISSUES_FOUND potential issues that may need attention." >> health-report.md
            echo "HEALTH_STATUS=issues_found" >> $GITHUB_ENV
          fi

          echo "ISSUES_COUNT=$ISSUES_FOUND" >> $GITHUB_ENV

      - name: Upload health report
        uses: actions/upload-artifact@v4
        with:
          name: health-report
          path: health-report.md

      - name: Create issue if problems found
        if: env.HEALTH_STATUS == 'issues_found' && github.event_name == 'schedule'
        uses: actions/github-script@v8
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('health-report.md', 'utf8');

            // Check if a health check issue already exists
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['health-check', 'automated'],
              state: 'open'
            });

            if (issues.data.length === 0) {
              // Create new issue
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `Repository Health Check - ${{ env.ISSUES_COUNT }} Issues Found`,
                body: `## Automated Health Check Report\n\n${report}\n\n---\n*This issue was automatically created by the health check workflow.*`,
                labels: ['health-check', 'automated', 'maintenance']
              });
            } else {
              // Update existing issue
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issues.data[0].number,
                body: `## Updated Health Check Report\n\n${report}\n\n---\n*Updated: ${new Date().toISOString()}*`
              });
            }

      - name: Health check summary
        run: |
          echo "## 🏥 Repository Health Check Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ env.HEALTH_STATUS }}" >> $GITHUB_STEP_SUMMARY
          echo "**Issues Found:** ${{ env.ISSUES_COUNT }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ env.HEALTH_STATUS }}" = "issues_found" ]; then
            echo "⚠️ Some issues were detected. Check the health report artifact for details." >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ Repository is healthy!" >> $GITHUB_STEP_SUMMARY
          fi
