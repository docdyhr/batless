name: Release Management

on:
  push:
    tags: ['v*']
  release:
    types: [published]
  pull_request:
    types: [closed]
    branches: [main]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release (e.g., v1.0.0)'
        required: true

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  # Build releases for multiple platforms
  build-release:
    name: Build Release (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_suffix: ""
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            binary_suffix: ""
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary_suffix: ".exe"
          - os: macos-latest
            target: x86_64-apple-darwin
            binary_suffix: ""
          - os: macos-latest
            target: aarch64-apple-darwin
            binary_suffix: ""

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ matrix.target }}-release-${{ hashFiles('**/Cargo.lock') }}

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Package binary
        shell: bash
        run: |
          binary_name="batless${{ matrix.binary_suffix }}"
          if [[ "${{ matrix.target }}" == *"windows"* ]]; then
            7z a "batless-${{ matrix.target }}.zip" "./target/${{ matrix.target }}/release/$binary_name"
          else
            tar -czf "batless-${{ matrix.target }}.tar.gz" -C "./target/${{ matrix.target }}/release" "$binary_name"
          fi

      - name: Upload release artifact
        uses: actions/upload-artifact@v4
        with:
          name: batless-${{ matrix.target }}
          path: batless-${{ matrix.target }}.*

  # Create GitHub release
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build-release
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Generate changelog
        id: changelog
        run: |
          if [[ -f "CHANGELOG.md" ]]; then
            # Extract changelog for current version
            current_version="${{ github.ref_name }}"
            awk "/^## \[?${current_version#v}\]?/,/^## \[?[0-9]/ { if (/^## \[?[0-9]/ && !/^## \[?${current_version#v}\]?/) exit; print }" CHANGELOG.md > current_changelog.md
          else
            echo "Release ${{ github.ref_name }}" > current_changelog.md
            echo "See commit history for changes." >> current_changelog.md
          fi

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body_path: current_changelog.md
          files: |
            batless-*/batless-*

  # Publish to crates.io
  publish-crate:
    name: Publish to Crates.io
    runs-on: ubuntu-latest
    needs: create-release
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Login to crates.io
        run: cargo login ${{ secrets.CARGO_REGISTRY_TOKEN }}

      - name: Publish to crates.io
        run: cargo publish

  # Update Homebrew tap
  update-homebrew:
    name: Update Homebrew Tap
    runs-on: ubuntu-latest
    needs: create-release
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Update Homebrew formula
        uses: dawidd6/action-homebrew-bump-formula@v3
        with:
          token: ${{ secrets.HOMEBREW_TAP_TOKEN }}
          tap: docdyhr/homebrew-tap
          formula: batless
          tag: ${{ github.ref_name }}

  # Tag after release PR merge
  tag-after-merge:
    name: Tag After Release PR
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true && contains(github.event.pull_request.title, 'release')
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version from PR
        id: version
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          if [[ $PR_TITLE =~ release[[:space:]]*([0-9]+\.[0-9]+\.[0-9]+) ]]; then
            VERSION="${BASH_REMATCH[1]}"
            echo "version=v$VERSION" >> $GITHUB_OUTPUT
            echo "Found version: v$VERSION"
          else
            echo "No version found in PR title: $PR_TITLE"
            exit 1
          fi

      - name: Create and push tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag ${{ steps.version.outputs.version }}
          git push origin ${{ steps.version.outputs.version }}
