name: Manual Release Trigger

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 0.1.2)'
        required: true
        type: string
      create_tag:
        description: 'Create and push tag'
        required: true
        type: boolean
        default: true
      dry_run:
        description: 'Dry run (skip actual publishing)'
        required: true
        type: boolean
        default: false

permissions:
  contents: write
  id-token: write
  packages: write

jobs:
  prepare-release:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.prepare.outputs.tag }}
      version: ${{ steps.prepare.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Prepare release
        id: prepare
        run: |
          VERSION="${{ github.event.inputs.version }}"
          TAG="v${VERSION}"

          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "tag=${TAG}" >> $GITHUB_OUTPUT

          echo "## Release Preparation" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** ${VERSION}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag:** ${TAG}" >> $GITHUB_STEP_SUMMARY
          echo "- **Create Tag:** ${{ github.event.inputs.create_tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Dry Run:** ${{ github.event.inputs.dry_run }}" >> $GITHUB_STEP_SUMMARY

      - name: Validate version format
        run: |
          VERSION="${{ steps.prepare.outputs.version }}"
          if ! echo "$VERSION" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$'; then
            echo "::error::Version must be in format X.Y.Z (e.g., 0.1.2)"
            exit 1
          fi

      - name: Check if tag exists
        run: |
          TAG="${{ steps.prepare.outputs.tag }}"
          if git tag -l | grep -q "^${TAG}$"; then
            echo "::error::Tag ${TAG} already exists"
            exit 1
          fi

      - name: Update version in Cargo.toml
        if: github.event.inputs.create_tag == 'true'
        run: |
          VERSION="${{ steps.prepare.outputs.version }}"
          sed -i "s/^version = \".*\"/version = \"${VERSION}\"/" Cargo.toml

          # Verify the change
          grep "^version = \"${VERSION}\"" Cargo.toml || {
            echo "::error::Failed to update version in Cargo.toml"
            exit 1
          }

      - name: Update CHANGELOG.md
        if: github.event.inputs.create_tag == 'true'
        run: |
          VERSION="${{ steps.prepare.outputs.version }}"
          DATE=$(date +%Y-%m-%d)

          # Create temporary changelog entry
          cat > temp_changelog.md << EOF
          ## [${VERSION}] - ${DATE}

          ### Added
          - Manual release for version ${VERSION}

          ### Changed
          - Updated release process and workflows

          ### Fixed
          - Various improvements and bug fixes

          EOF

          # Insert new entry after [Unreleased] section
          awk '
            /^## \[Unreleased\]/ {
              print;
              getline; print;  # Print the blank line after [Unreleased]
              while ((getline line < "temp_changelog.md") > 0) print line;
              close("temp_changelog.md");
            }
            { print }
          ' CHANGELOG.md > temp_full_changelog.md

          mv temp_full_changelog.md CHANGELOG.md
          rm -f temp_changelog.md

      - name: Commit version changes
        if: github.event.inputs.create_tag == 'true' && github.event.inputs.dry_run == 'false'
        run: |
          VERSION="${{ steps.prepare.outputs.version }}"

          git config user.name "Release Bot"
          git config user.email "release-bot@github.com"

          git add Cargo.toml CHANGELOG.md
          git commit -m "chore: bump version to ${VERSION}"
          git push origin main

      - name: Create and push tag
        if: github.event.inputs.create_tag == 'true' && github.event.inputs.dry_run == 'false'
        run: |
          TAG="${{ steps.prepare.outputs.tag }}"
          VERSION="${{ steps.prepare.outputs.version }}"

          git tag -a "${TAG}" -m "Release ${VERSION}"
          git push origin "${TAG}"

  trigger-release:
    needs: prepare-release
    if: github.event.inputs.create_tag == 'true' && github.event.inputs.dry_run == 'false'
    runs-on: ubuntu-latest
    steps:
      - name: Trigger release workflow
        run: |
          TAG="${{ needs.prepare-release.outputs.tag }}"

          echo "## ðŸš€ Release Triggered" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The release workflow will be automatically triggered by the new tag: **${TAG}**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "You can monitor the release progress in the [Actions tab](https://github.com/docdyhr/batless/actions)." >> $GITHUB_STEP_SUMMARY

  dry-run-summary:
    needs: prepare-release
    if: github.event.inputs.dry_run == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Dry run summary
        run: |
          VERSION="${{ needs.prepare-release.outputs.version }}"
          TAG="${{ needs.prepare-release.outputs.tag }}"

          echo "## ðŸ§ª Dry Run Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${VERSION}" >> $GITHUB_STEP_SUMMARY
          echo "**Tag:** ${TAG}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### What would happen in a real release:" >> $GITHUB_STEP_SUMMARY
          echo "1. Update version in Cargo.toml to ${VERSION}" >> $GITHUB_STEP_SUMMARY
          echo "2. Update CHANGELOG.md with new release entry" >> $GITHUB_STEP_SUMMARY
          echo "3. Commit changes to main branch" >> $GITHUB_STEP_SUMMARY
          echo "4. Create and push tag ${TAG}" >> $GITHUB_STEP_SUMMARY
          echo "5. Trigger automatic release workflow" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**No actual changes were made.** Re-run with dry_run=false to perform the release." >> $GITHUB_STEP_SUMMARY
