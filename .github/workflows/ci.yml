name: CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  release:
    types: [published]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta]
        exclude:
          - os: windows-latest
            rust: beta
          - os: macos-latest
            rust: beta

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust }}
          components: rustfmt, clippy

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ matrix.rust }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.rust }}-cargo-
            ${{ runner.os }}-cargo-

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Run tests
        run: cargo test --all-features --verbose

      - name: Run integration tests
        run: cargo test --test integration_tests --verbose

      - name: Build release
        run: cargo build --release --verbose

      - name: Test CLI functionality
        run: |
          ./target/release/batless --version
          ./target/release/batless README.md --mode=plain --max-lines=5
          ./target/release/batless Cargo.toml --mode=json --max-lines=3

  security_audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - name: Cache security tools
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin
          key: ${{ runner.os }}-security-tools-${{ hashFiles('**/Cargo.lock') }}
      - name: Install cargo-audit
        run: cargo install cargo-audit --locked --force
      - name: Run security audit
        run: cargo audit --color never --quiet

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: llvm-tools-preview
      - name: Install cargo-llvm-cov
        run: cargo install cargo-llvm-cov
      - name: Generate coverage
        run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          files: lcov.info
          fail_ci_if_error: false
          flags: unittests
          name: ci-coverage

  build_binaries:
    name: Build Binaries
    if: github.event_name == 'release'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_suffix: ""
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            binary_suffix: ""
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary_suffix: ".exe"
          - os: macos-latest
            target: x86_64-apple-darwin
            binary_suffix: ""
          - os: macos-latest
            target: aarch64-apple-darwin
            binary_suffix: ""

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install musl tools
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: sudo apt-get install -y musl-tools

      - name: Build binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Strip binary (unix)
        if: matrix.os != 'windows-latest'
        run: strip target/${{ matrix.target }}/release/batless${{ matrix.binary_suffix }}

      - name: Create archive
        shell: bash
        run: |
          binary_name="batless${{ matrix.binary_suffix }}"
          archive_name="batless-${{ github.ref_name }}-${{ matrix.target }}"

          mkdir "$archive_name"
          cp "target/${{ matrix.target }}/release/$binary_name" "$archive_name/"
          cp README.md LICENSE CHANGELOG.md "$archive_name/"

          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            7z a "${archive_name}.zip" "$archive_name"
            echo "ASSET=${archive_name}.zip" >> $GITHUB_ENV
          else
            tar czf "${archive_name}.tar.gz" "$archive_name"
            echo "ASSET=${archive_name}.tar.gz" >> $GITHUB_ENV
          fi

      - name: Upload binary to release
        uses: actions/upload-artifact@v4
        with:
          name: release-binaries-${{ matrix.target }}
          path: batless-*-${{ matrix.target }}.*
          retention-days: 90

  publish_crate:
    name: Publish to crates.io
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    needs: [test, security_audit]
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - name: Publish to crates.io
        run: cargo publish --allow-dirty --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
