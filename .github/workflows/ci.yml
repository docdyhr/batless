name: CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta]
        exclude:
          - os: windows-latest
            rust: beta
          - os: macos-latest
            rust: beta

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo index
      uses: actions/cache@v3
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo build
      uses: actions/cache@v3
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Run tests
      run: cargo test --all-features --verbose

    - name: Run integration tests
      run: cargo test --test integration_tests --verbose

    - name: Build release
      run: cargo build --release --verbose

    - name: Test CLI functionality
      run: |
        ./target/release/batless --version
        ./target/release/batless README.md --mode=plain --max-lines=5
        ./target/release/batless Cargo.toml --mode=json --max-lines=3

  security_audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@stable
    - name: Install cargo-audit
      run: cargo install cargo-audit
    - name: Run security audit
      run: cargo audit

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview
    - name: Install cargo-llvm-cov
      run: cargo install cargo-llvm-cov
    - name: Generate coverage
      run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: lcov.info
        fail_ci_if_error: true

  build_binaries:
    name: Build Binaries
    if: github.event_name == 'release'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_suffix: ""
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            binary_suffix: ""
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary_suffix: ".exe"
          - os: macos-latest
            target: x86_64-apple-darwin
            binary_suffix: ""
          - os: macos-latest
            target: aarch64-apple-darwin
            binary_suffix: ""

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install musl tools
      if: matrix.target == 'x86_64-unknown-linux-musl'
      run: sudo apt-get install -y musl-tools

    - name: Build binary
      run: cargo build --release --target ${{ matrix.target }}

    - name: Strip binary (unix)
      if: matrix.os != 'windows-latest'
      run: strip target/${{ matrix.target }}/release/batless${{ matrix.binary_suffix }}

    - name: Create archive
      shell: bash
      run: |
        binary_name="batless${{ matrix.binary_suffix }}"
        archive_name="batless-${{ github.ref_name }}-${{ matrix.target }}"

        mkdir "$archive_name"
        cp "target/${{ matrix.target }}/release/$binary_name" "$archive_name/"
        cp README.md LICENSE CHANGELOG.md "$archive_name/"

        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          7z a "${archive_name}.zip" "$archive_name"
          echo "ASSET=${archive_name}.zip" >> $GITHUB_ENV
        else
          tar czf "${archive_name}.tar.gz" "$archive_name"
          echo "ASSET=${archive_name}.tar.gz" >> $GITHUB_ENV
        fi

    - name: Upload binary to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./${{ env.ASSET }}
        asset_name: ${{ env.ASSET }}
        asset_content_type: application/octet-stream

  publish_crate:
    name: Publish to crates.io
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    needs: [test, security_audit]
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@stable
    - name: Publish to crates.io
      run: cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
