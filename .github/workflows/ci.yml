name: CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  release:
    types: [published]
  workflow_dispatch:

# Concurrency control to prevent redundant runs
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0
  RUSTFLAGS: "-C target-cpu=native"

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta]
        exclude:
          - os: windows-latest
            rust: beta
          - os: macos-latest
            rust: beta

    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 1

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust }}
          components: rustfmt, clippy

      - name: Cache dependencies (Swatinem)
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.os }}-${{ matrix.rust }}
          cache-all-crates: true
          save-if: ${{ github.ref == 'refs/heads/main' }}

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Run tests
        run: cargo test --all-features --verbose

      - name: Run integration tests
        run: cargo test --test integration_tests --verbose

      - name: Build release
        run: cargo build --release --verbose

      - name: Test CLI functionality
        run: |
          ./target/release/batless --version
          ./target/release/batless README.md --mode=plain --max-lines=5
          ./target/release/batless Cargo.toml --mode=json --max-lines=3

  security_audit:
    name: Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 5
    continue-on-error: true
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 1
      - uses: dtolnay/rust-toolchain@stable
      - name: Cache security tools
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin
          key: ${{ runner.os }}-security-tools-v2
      - name: Install cargo-audit
        run: |
          if ! command -v cargo-audit &> /dev/null; then
            cargo install cargo-audit --locked
          fi
      - name: Run security audit
        run: cargo audit --color never

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 1
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: llvm-tools-preview
      - uses: Swatinem/rust-cache@v2
      - name: Install cargo-llvm-cov
        run: |
          if ! command -v cargo-llvm-cov &> /dev/null; then
            cargo install cargo-llvm-cov --locked
          fi
      - name: Generate coverage
        run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          files: lcov.info
          fail_ci_if_error: false
          flags: unittests
          name: ci-coverage

  build_binaries:
    name: Build Binaries
    if: github.event_name == 'release'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_suffix: ""
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            binary_suffix: ""
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary_suffix: ".exe"
          - os: macos-latest
            target: x86_64-apple-darwin
            binary_suffix: ""
          - os: macos-latest
            target: aarch64-apple-darwin
            binary_suffix: ""

    steps:
      - uses: actions/checkout@v5

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install musl tools
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: sudo apt-get install -y musl-tools

      - name: Build binary
        env:
          TARGET_TRIPLE: ${{ matrix.target }}
        run: cargo build --release --target "$TARGET_TRIPLE"

      - name: Strip binary (unix)
        if: matrix.os != 'windows-latest'
        env:
          TARGET_TRIPLE: ${{ matrix.target }}
          BINARY_SUFFIX: ${{ matrix.binary_suffix }}
        run: strip "target/${TARGET_TRIPLE}/release/batless${BINARY_SUFFIX}"

      - name: Create archive
        shell: bash
        env:
          BINARY_SUFFIX: ${{ matrix.binary_suffix }}
          TARGET_TRIPLE: ${{ matrix.target }}
          REF_NAME: ${{ github.ref_name }}
          OS_NAME: ${{ matrix.os }}
        run: |
          binary_name="batless${BINARY_SUFFIX}"
          archive_name="batless-${REF_NAME}-${TARGET_TRIPLE}"

          mkdir "$archive_name"
          cp "target/${TARGET_TRIPLE}/release/$binary_name" "$archive_name/"
          cp README.md LICENSE CHANGELOG.md "$archive_name/"

          if [[ "$OS_NAME" == "windows-latest" ]]; then
            7z a "${archive_name}.zip" "$archive_name"
            echo "ASSET=${archive_name}.zip" >> $GITHUB_ENV
          else
            tar czf "${archive_name}.tar.gz" "$archive_name"
            echo "ASSET=${archive_name}.tar.gz" >> $GITHUB_ENV
          fi

      - name: Upload binary to release
        uses: actions/upload-artifact@v4
        with:
          name: release-binaries-${{ matrix.target }}
          path: batless-*-${{ matrix.target }}.*
          retention-days: 90

  publish_crate:
    name: Publish to crates.io
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    needs: [test, security_audit]
    steps:
      - uses: actions/checkout@v5
      - uses: dtolnay/rust-toolchain@stable
      - name: Publish to crates.io
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: |
          if [ -z "$CARGO_REGISTRY_TOKEN" ]; then
            echo "CARGO_REGISTRY_TOKEN not set; skipping publish"
            exit 0
          fi
          cargo publish --allow-dirty --token "$CARGO_REGISTRY_TOKEN"
