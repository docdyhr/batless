# cargo-deny configuration for security and license management
# https://github.com/EmbarkStudios/cargo-deny

[graph]
# Lint level for when multiple versions of the same crate are detected
multiple-versions = "warn"
# Lint level for when a crate version requirement is `*`
wildcards = "allow"

[output]
# When outputting inclusion graphs in diagnostics that include features, instead of
# just showing the features that are enabled/disabled, also show the actual version
# requirement that enabled the feature
feature-depth = 1

[advisories]
# The path where the advisory databases are cloned/fetched into
db-path = "~/.cargo/advisory-dbs"
# The url(s) of the advisory databases to use
db-urls = ["https://github.com/rustsec/advisory-db"]
# The lint level for security vulnerabilities
vulnerability = "deny"
# The lint level for unmaintained crates
unmaintained = "warn"
# The lint level for crates that have been yanked from their source registry
yanked = "deny"
# The lint level for crates with security notices
notice = "warn"
# A list of advisory IDs to ignore
ignore = [
    #"RUSTSEC-0000-0000",
]

[licenses]
# The confidence threshold for detecting a license from a license text.
confidence-threshold = 0.8
# List of explicitly allowed licenses
allow = [
    "MIT",
    "Apache-2.0",
    "Apache-2.0 WITH LLVM-exception",
    "BSD-2-Clause", 
    "BSD-3-Clause",
    "ISC",
    "Unicode-DFS-2016",
    "CC0-1.0",
    "MPL-2.0",
]
# List of explicitly disallowed licenses
deny = [
    "GPL-2.0",
    "GPL-3.0", 
    "AGPL-1.0",
    "AGPL-3.0",
    "SSPL-1.0",
    "BSL-1.1",
    "BUSL-1.1",
    "Commons-Clause",
]
# Lint level for when a crate has a license that is not in the allowed list
unlicensed = "deny"
# Lint level for when a crate has a license that is explicitly disallowed
copyleft = "deny"
# Blanket approval or denial for OSI-approved or FSF approved licenses
allow-osi-fsf-free = "both"
# Lint level used when no other predicates are matched
default = "deny"

[bans]
# Lint level for when multiple versions of the same crate are detected
multiple-versions = "warn"
# Lint level for when a crate version requirement is `*`
wildcards = "allow"
# The graph highlighting used when creating dotgraphs for crates
highlight = "all"
# List of crates that are allowed to have multiple versions
allow = [
    # Common crates that often have multiple versions
    #{ name = "bitflags", version = "*" },
]
# List of crates to deny
deny = [
    # Crates with known security issues or that are unmaintained
    { name = "openssl-sys", wrappers = ["openssl"] }, # Use rustls instead
    { name = "net2" }, # Deprecated, use socket2
    { name = "tempdir" }, # Use tempfile instead
    { name = "time", version = "<0.2" }, # Old vulnerable versions
]

[sources]
# Lint level for what to happen when a crate from a crate registry that is
# not in the allow list is encountered
unknown-registry = "deny"
# Lint level for what to happen when a crate from a git repository that is
# not in the allow list is encountered  
unknown-git = "deny"
# List of allowed registries
allow-registry = ["https://github.com/rust-lang/crates.io-index"]
# List of allowed Git repositories
allow-git = []